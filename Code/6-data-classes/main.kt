//Each object has a function named equals because its class inherits the function from a class named Any.
//Class Any is the mother of all classes: the ultimate superclass of everything.

//Having Any as the ultimate superclass has two key benefits:

//* It ensures that every class inherits common behavior.

//The Any class defines important behavior that the system relies on, and as every class is a subclass of Any,
//this behavior is inherited by every object you create. The Any class defines a function named equals,
//for example, which means that every object automatically inherits this function.

//* It means you can use polymorphism with any object.

//Every class is a subclass of Any, so every object you create has Any as its ultimate supertype.
//This means that you can create a function with Any parameters, or an Any return type,
//so that it will work with all types of object.
//It also means that you can create polymorphic arrays to hold objects of any type using code like this:
// val myArray = arrayOf(Car(), Guitar(), Giraffe())

//The common behavior defined by Any:
//* equals(any: Any): Boolean: true if point to the same object
//* hashCode(): Int:
//*toString(): String:

//A data class is one that lets you create objects whose main purpose is to store data.
// It includes features that are helpful when youâ€™re dealing with data,
// such as a new implementation of the equals function that checks
// whether two data objects hold the same property values. This is because if two objects store the same data,
// they can be considered equal.

data class Recipe(val title: String, val isVegetarian: Boolean, val default: String = "exampleDefault") {
    // This property won't be considered in equal, hashCode, toString, and copy functions
    // Any properties that you want to be included in the functions generated by a data class must be defined in
    // its primary constructor.
    // If you have many properties, you can put them into the primary constructor and assign default values to them.
    var mainIngredient = ""
    constructor(isVegetarian: Boolean) : this("unkown_title", isVegetarian) {
        // this(...) calls the primary constructor
        // Code that runs when the secondary constructor is called.
    }
}

fun main() {
    //Data class override equal implementation
    //The equals function compares property values
    val r1 = Recipe("Chicken Bhuna", false)
    val r2 = Recipe("Chicken Bhuna", false)
    println(r1 == r2) // true
//    The === operator always lets you check whether two variables refer to the same underlying object.
    println(r1 === r2) // false

    //Equal objects return the same hashCode value
    println(r1.hashCode() == r2.hashCode()) // true

    //toString returns the value of each property
    println(r1.toString()) // Recipe(title=Chicken Bhuna, isVegetarian=false)

    //The copy function lets you copy a data object, altering some of its properties. The original object remains intact.
    r2 = r1.copy(isVegetarian = true)

//    Data classes define componentN functions...
    val title = r1.component1()
    val isVeg = r1.component2()
//    ...that let you destructure data objects
    val (title1, isVeg1) = r1

}